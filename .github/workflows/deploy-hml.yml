# .github/workflows/deploy-hml.yml

name: Deploy to Homologation (Manual)

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch para fazer deploy'
        required: true
        default: 'develop'
        type: string
      sync_database:
        description: 'Sincronizar banco de dados da produ√ß√£o?'
        required: true
        default: false
        type: boolean
      confirm:
        description: 'Digite "DEPLOY" para confirmar'
        required: true
        type: string

jobs:
  validate:
    name: Validar confirma√ß√£o
    runs-on: ubuntu-latest
    steps:
      - name: ‚ùå Verificar confirma√ß√£o
        if: github.event.inputs.confirm != 'DEPLOY'
        run: |
          echo "‚ùå Deploy cancelado: voc√™ deve digitar 'DEPLOY' para confirmar"
          exit 1

  sync-database:
    name: Sincronizar Database (Opcional)
    runs-on: ubuntu-latest
    needs: [validate]
    if: github.event.inputs.sync_database == 'true'
    steps:
      - name: üîÑ Criar c√≥pia do banco de produ√ß√£o
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30m
          script: |
            set -e
            
            echo "üîê Sincronizando banco de dados..."
            echo "‚ö†Ô∏è  ATEN√á√ÉO: Isso vai SOBRESCREVER o banco de HML!"
            
            DB_PROD="${{ secrets.DATABASE_NAME }}"
            DB_HML="${{ secrets.HML_DATABASE_NAME }}"
            DB_USER="${{ secrets.DATABASE_USER }}"
            DB_PASS="${{ secrets.DATABASE_PASSWORD }}"
            
            BACKUP_FILE="/tmp/prod_backup_$(date +%Y%m%d_%H%M%S).sql"
            
            echo "üì¶ Criando backup do banco de produ√ß√£o..."
            mysqldump -u "$DB_USER" -p"$DB_PASS" "$DB_PROD" > "$BACKUP_FILE"
            
            echo "üìä Tamanho do backup: $(du -h $BACKUP_FILE | cut -f1)"
            
            echo "üóëÔ∏è  Dropando banco HML se existir..."
            mysql -u "$DB_USER" -p"$DB_PASS" -e "DROP DATABASE IF EXISTS \`$DB_HML\`;"
            
            echo "üÜï Criando banco HML..."
            mysql -u "$DB_USER" -p"$DB_PASS" -e "CREATE DATABASE \`$DB_HML\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
            
            echo "üì• Importando dados da produ√ß√£o para HML..."
            mysql -u "$DB_USER" -p"$DB_PASS" "$DB_HML" < "$BACKUP_FILE"
            
            echo "üßπ Limpando backup tempor√°rio..."
            rm "$BACKUP_FILE"
            
            echo "‚úÖ Banco HML sincronizado com sucesso!"
            echo "üìä Contando registros..."
            mysql -u "$DB_USER" -p"$DB_PASS" "$DB_HML" -e "
              SELECT 
                (SELECT COUNT(*) FROM Customer) as total_customers,
                (SELECT COUNT(*) FROM \`Order\`) as total_orders;
            "

  deploy:
    name: Build and Deploy to HML
    runs-on: ubuntu-latest
    needs: [validate, sync-database]
    if: always() && needs.validate.result == 'success' && (needs.sync-database.result == 'success' || needs.sync-database.result == 'skipped')
    environment: homologation
    
    steps:
      # 1. Checkout da branch especificada
      - name: üîÑ Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      # 2. Setup Node.js
      - name: üîß Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 3. Instalar depend√™ncias
      - name: üì¶ Install dependencies
        run: npm ci

      # 4. Build do frontend para HML
      - name: üèóÔ∏è Build frontend (HML)
        env:
          REACT_APP_AUTH0_DOMAIN: ${{ secrets.HML_AUTH0_DOMAIN }}
          REACT_APP_AUTH0_CLIENT_ID: ${{ secrets.HML_AUTH0_CLIENT_ID }}
          REACT_APP_AUTH0_AUDIENCE: ${{ secrets.HML_AUTH0_AUDIENCE }}
          REACT_APP_API_URL: https://hml.pedidosnicolina.com
          REACT_APP_FRONTEND_URL: https://hml.pedidosnicolina.com
          CI: false
        run: npm run build

      # 5. Criar arquivo compactado
      - name: üì¶ Create build archive
        run: |
          cd build
          tar -czf ../build-hml.tar.gz .
          cd ..
          echo "‚úÖ Build criado: $(du -h build-hml.tar.gz | cut -f1)"

      # 6. Enviar para VM
      - name: üì§ Upload build to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "build-hml.tar.gz"
          target: "/home/ubuntu/projects/ordermanagerhml/order-manager-hml/"
          timeout: 10m

      # 7. Deploy na VM
      - name: üöÄ Deploy on VM (HML)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 10m
          script: |
            set -e
            
            echo "üìÇ Navegando para HML..."
            cd /home/ubuntu/projects/ordermanagerhml/order-manager-hml
            
            echo "üì¶ Extraindo build..."
            if [ -d "build" ]; then
              echo "üíæ Backup do build anterior..."
              mv build build.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            echo "üìÇ Criando pasta build..."
            mkdir -p build
            
            echo "üì• Extraindo arquivos..."
            tar -xzf build-hml.tar.gz -C build/
            
            echo "üîç Verificando extra√ß√£o:"
            ls -lah build/ | head -20
            echo ""
            echo "üìä Total de arquivos extra√≠dos:"
            find build -type f | wc -l
            echo ""
            
            if [ ! -f "build/index.html" ]; then
              echo "‚ùå ERRO: index.html n√£o foi extra√≠do!"
              echo "Conte√∫do do tar.gz:"
              tar -tzf build-hml.tar.gz | head -20
              exit 1
            fi
            
            echo "‚úÖ index.html verificado:"
            ls -lh build/index.html
            stat build/index.html
            
            rm build-hml.tar.gz
            
            echo "üîß Atualizando c√≥digo backend..."
            git fetch origin
            git checkout ${{ github.event.inputs.branch }}
            git pull origin ${{ github.event.inputs.branch }}
            
            echo "Branch atual: $(git branch --show-current)"
            echo "√öltimo commit: $(git log -1 --oneline)"
            
            export BUN_INSTALL="$HOME/.bun"
            export PATH="$BUN_INSTALL/bin:/usr/local/bin:$HOME/.nvm/versions/node/v22.20.0/bin:$PATH"
            
            echo "üîê Configurando .env HML..."
            cat > .env << 'EOF'
            AUTH0_DOMAIN=${{ secrets.HML_AUTH0_DOMAIN }}
            AUTH0_AUDIENCE=${{ secrets.HML_AUTH0_AUDIENCE }}
            REACT_APP_AUTH0_DOMAIN=${{ secrets.HML_AUTH0_DOMAIN }}
            REACT_APP_AUTH0_AUDIENCE=${{ secrets.HML_AUTH0_AUDIENCE }}
            DB_HOST=${{ secrets.HML_DATABASE_HOST }}
            DB_USER=${{ secrets.HML_DATABASE_USER }}
            DB_PASSWORD=${{ secrets.HML_DATABASE_PASSWORD }}
            DB_NAME=${{ secrets.HML_DATABASE_NAME }}
            DATABASE_URL=${{ secrets.HML_DATABASE_URL }}
            PORT=4001
            NODE_ENV=homologation
            EOF
            
            echo "üì¶ Instalando depend√™ncias..."
            bun install
            
            echo "üîß Executando Prisma..."
            bunx prisma generate
            bunx prisma migrate deploy || echo "‚ö†Ô∏è Nenhuma migration pendente"
            
            echo "‚ôªÔ∏è Reiniciando backend HML..."
            pm2 stop api-backend-hml 2>/dev/null || true
            pm2 delete api-backend-hml 2>/dev/null || true
            lsof -ti:4001 | xargs kill -9 2>/dev/null || true
            sleep 2
            
            cd /home/ubuntu/projects/ordermanagerhml/order-manager-hml/src/backend
            
            cat > start-backend-hml.sh << 'EOFSCRIPT'
            #!/bin/bash
            cd /home/ubuntu/projects/ordermanagerhml/order-manager-hml
            source .env
            export REACT_APP_AUTH0_DOMAIN
            export REACT_APP_AUTH0_AUDIENCE
            export AUTH0_DOMAIN
            export AUTH0_AUDIENCE
            export DATABASE_URL
            export DB_HOST
            export DB_USER
            export DB_PASSWORD
            export DB_NAME
            export NODE_ENV
            export PORT
            cd /home/ubuntu/projects/ordermanagerhml/order-manager-hml/src/backend
            exec bun run server.ts
            EOFSCRIPT
            
            chmod +x start-backend-hml.sh
            
            echo "üöÄ Iniciando backend HML..."
            pm2 start start-backend-hml.sh --name "api-backend-hml" --interpreter bash
            pm2 save
            
            sleep 5
            
            echo "üîÑ Reiniciando Nginx..."
            sudo systemctl restart nginx
            
            echo "üìä Status HML:"
            pm2 describe api-backend-hml | grep -E "status|uptime|restarts"
            
            echo ""
            echo "‚úÖ Deploy HML conclu√≠do!"
            echo "üåø Branch: ${{ github.event.inputs.branch }}"
            echo "üóÑÔ∏è  Database sync: ${{ github.event.inputs.sync_database }}"

      # 8. Health check
      - name: üè• Health check HML
        run: |
          echo "‚è≥ Aguardando 15 segundos..."
          sleep 15
          
          echo "üîç Verificando HML..."
          response=$(curl -s -o /dev/null -w "%{http_code}" https://hml.pedidosnicolina.com)
          
          if [ $response -eq 200 ] || [ $response -eq 301 ] || [ $response -eq 302 ]; then
            echo "‚úÖ HML est√° no ar! (HTTP $response)"
          else
            echo "‚ö†Ô∏è HML retornou HTTP $response"
            echo "Tentando novamente..."
            sleep 10
            response=$(curl -s -o /dev/null -w "%{http_code}" https://hml.pedidosnicolina.com)
            if [ $response -eq 200 ] || [ $response -eq 301 ] || [ $response -eq 302 ]; then
              echo "‚úÖ HML no ar na segunda tentativa!"
            else
              echo "‚ùå HML n√£o est√° respondendo"
              exit 1
            fi
          fi

      # 9. Resumo do deploy
      - name: üéâ Deploy Summary
        if: success()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üéâ Deploy HML realizado com sucesso!"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üåø Branch: ${{ github.event.inputs.branch }}"
          echo "üóÑÔ∏è  Database sincronizado: ${{ github.event.inputs.sync_database }}"
          echo "üåê Frontend: https://hml.pedidosnicolina.com"
          echo "üîå API: https://hml.pedidosnicolina.com/api"
          echo "üìä Logs: ssh ubuntu@${{ secrets.REMOTE_HOST }} 'pm2 logs api-backend-hml'"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

      - name: ‚ùå Deploy Failed
        if: failure()
        run: |
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "‚ùå Deploy HML falhou!"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìã Verifique os logs acima"
          echo "üîç Debug: ssh ubuntu@${{ secrets.REMOTE_HOST }}"
          echo "üìä PM2: pm2 logs api-backend-hml"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"